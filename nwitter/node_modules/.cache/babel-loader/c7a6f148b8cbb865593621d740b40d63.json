{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/minchulcho/Desktop/Web/ntwitterBeforeClean/ntwitter/nwitter/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\";\n\nfunction App() {\n  _s();\n\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  /*\n      사용자가 로그인 하게 되면 In App.js, onAuthStateChanged가 가장 먼저 콜 된다. \n      그러면 로그인 한 사용자에 대한 정보를 받을 수 있다. setUserObj를 사용해서 userObj에 \n      사용자에 대한 정보를 저장한다. \n  */\n\n  useEffect(() => {\n    authService.onAuthStateChanged(user => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: args => user.updateProfile(args)\n        });\n      } else {\n        setIsLoggedIn(false);\n      } //console.log (userObj.uid )\n\n\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: args => user.updateProfile(args)\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [init ? /*#__PURE__*/_jsxDEV(AppRouter, {\n      refreshUser: refreshUser,\n      isLoggedIn: Boolean(userObj),\n      userObj: userObj\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 22\n    }, this) : \"Initializing...\", /*#__PURE__*/_jsxDEV(\"footer\", {\n      children: [\"\\xA9 \", new Date().getFullYear(), \" Nwitter\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"+8UWPZeDHvBWUbvjuGH9aya/3CQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/minchulcho/Desktop/Web/ntwitterBeforeClean/ntwitter/nwitter/src/components/App.js"],"names":["React","useState","useEffect","AppRouter","authService","App","init","setInit","isLoggedIn","setIsLoggedIn","userObj","setUserObj","onAuthStateChanged","user","displayName","uid","updateProfile","args","refreshUser","currentUser","Boolean","Date","getFullYear"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,IAAD,CAAtC;AAEA;AACF;AACA;AACA;AACA;;AACEC,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,WAAW,CAACQ,kBAAZ,CAAgCC,IAAD,IAAU;AACvC,UAAIA,IAAJ,EAAU;AACRJ,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,QAAAA,UAAU,CAAC;AACTG,UAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,UAAAA,GAAG,EAAEF,IAAI,CAACE,GAFD;AAGTC,UAAAA,aAAa,EAAGC,IAAD,IAAUJ,IAAI,CAACG,aAAL,CAAmBC,IAAnB;AAHhB,SAAD,CAAV;AAKD,OAPD,MAOO;AACLR,QAAAA,aAAa,CAAC,KAAD,CAAb;AACD,OAVsC,CAWvC;;;AACAF,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAbD;AAcD,GAfQ,EAeN,EAfM,CAAT;;AAgBA,QAAMW,WAAW,GAAG,MAAM;AACxB,UAAML,IAAI,GAAGT,WAAW,CAACe,WAAzB;AACAR,IAAAA,UAAU,CAAC;AACTG,MAAAA,WAAW,EAAED,IAAI,CAACC,WADT;AAETC,MAAAA,GAAG,EAAEF,IAAI,CAACE,GAFD;AAGTC,MAAAA,aAAa,EAAGC,IAAD,IAAUJ,IAAI,CAACG,aAAL,CAAmBC,IAAnB;AAHhB,KAAD,CAAV;AAKD,GAPD;;AAQA,sBAAO;AAAA,eACJX,IAAI,gBAAY,QAAC,SAAD;AACX,MAAA,WAAW,EAAEY,WADF;AAEX,MAAA,UAAU,EAAEE,OAAO,CAACV,OAAD,CAFR;AAGX,MAAA,OAAO,EAAEA;AAHE;AAAA;AAAA;AAAA;AAAA,YAAZ,GAKI,iBANJ,eASL;AAAA,0BAAgB,IAAIW,IAAJ,GAAWC,WAAX,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA,YATK;AAAA,kBAAP;AAWD;;GA7CQjB,G;;KAAAA,G;AA+CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbase\"\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  /*\n      사용자가 로그인 하게 되면 In App.js, onAuthStateChanged가 가장 먼저 콜 된다. \n      그러면 로그인 한 사용자에 대한 정보를 받을 수 있다. setUserObj를 사용해서 userObj에 \n      사용자에 대한 정보를 저장한다. \n  */ \n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setIsLoggedIn(true);\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        setIsLoggedIn(false);\n      }\n      //console.log (userObj.uid )\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  return < >\n    {init ? (        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />) \n        :   (\"Initializing...\")}\n\n    \n    <footer>&copy; {new Date().getFullYear()} Nwitter</footer>\n  </>\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}