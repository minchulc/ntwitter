{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/minchulcho/Desktop/Web/ntwitter/nwitter/src/routes/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { dbService } from \"fbase\";\nimport Nweet from \"components/Nweet\";\n\nconst Home = ({\n  userObj\n}) => {\n  _s();\n\n  const [nweet, setNweet] = useState(\"\");\n  const [nweets, setNweets] = useState([]);\n  const [attachment, setAttachment] = useState();\n  /*\n    const getNweets = async () => {\n      // firebase database에서 \"nweets\"라는 collection를 가지고 온다. get()이라는 함수를 사용 \n      // https://firebase.google.com/docs/firestore/query-data/get-data\n      const dbNweets = await dbService.collection(\"nweets\").get(); \n      dbNweets.forEach((document) => {\n        // nweetObject를 만들어서 \n        const nweetObject = {\n          ...document.data(),\n          id: document.id,\n        };\n        setNweets( (prev) => [nweetObject, ...prev] );\n      });\n    };\n  */\n\n  /*\n     \n  */\n\n  useEffect(() => {\n    dbService.collection(\"nweets\").onSnapshot(snapshot => {\n      const nweetArray = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log(nweetArray);\n      setNweets(nweetArray);\n    });\n  }, []);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    await dbService.collection(\"nweets\").add({\n      text: nweet,\n      createdAt: Date.now(),\n      creatorId: userObj.uid\n    });\n    setNweet(\"\");\n  }; //console.log(nweets);\n\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setNweet(value);\n  };\n\n  const onFileChange = event => {\n    const {\n      target: {\n        files\n      }\n    } = event; // evnet 안에서 target 안으로 가서 파일을 받아 온다. \n\n    const theFile = files[0]; //In the  \"file\", just bring the first one. \n\n    const reader = new FileReader(); // fileReader API, 사용자가 올린 이미지(파일)을 읽기 위한 변수\n\n    reader.onloadend = finishedEvent => {\n      // reader에 event listener를 추가\n      const {\n        currentTarget: {\n          result\n        }\n      } = finishedEvent;\n      setAttachment(result);\n    };\n\n    reader.readAsDataURL(theFile); // 최종적으로 데이터를 가지고 올수 있음 \n  };\n\n  const onClearAttachment = () => setAttachment(null);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: nweet,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"What's on your mind?\",\n        maxLength: 120\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: onFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Nweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), attachment && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: attachment,\n          width: \"300px\",\n          height: \"300px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClearAttachment,\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nweets.map(nweet => /*#__PURE__*/_jsxDEV(Nweet, {\n        nweetObj: nweet,\n        isOwner: nweet.creatorId === userObj.uid\n      }, nweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Home, \"js3UJwMu14bRxU9xKfPV+RqjXCw=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/minchulcho/Desktop/Web/ntwitter/nwitter/src/routes/Home.js"],"names":["React","useState","useEffect","dbService","Nweet","Home","userObj","nweet","setNweet","nweets","setNweets","attachment","setAttachment","collection","onSnapshot","snapshot","nweetArray","docs","map","doc","id","data","console","log","onSubmit","event","preventDefault","add","text","createdAt","Date","now","creatorId","uid","onChange","target","value","onFileChange","files","theFile","reader","FileReader","onloadend","finishedEvent","currentTarget","result","readAsDataURL","onClearAttachment"],"mappings":"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","sourcesContent":["import React,{ useState, useEffect }  from \"react\";\nimport { dbService } from \"fbase\";\nimport Nweet from \"components/Nweet\";\n\nconst Home = ({userObj}) => {\n    const [nweet, setNweet] = useState(\"\");\n    const [nweets, setNweets] = useState([]);\n    const [attachment, setAttachment] = useState();\n\n    /*\n      const getNweets = async () => {\n        // firebase database에서 \"nweets\"라는 collection를 가지고 온다. get()이라는 함수를 사용 \n        // https://firebase.google.com/docs/firestore/query-data/get-data\n        const dbNweets = await dbService.collection(\"nweets\").get(); \n        dbNweets.forEach((document) => {\n          // nweetObject를 만들어서 \n          const nweetObject = {\n            ...document.data(),\n            id: document.id,\n          };\n          setNweets( (prev) => [nweetObject, ...prev] );\n        });\n      };\n    */\n\n\n    /*\n\n      \n    */\n\n    useEffect(() => {\n        dbService.collection(\"nweets\").onSnapshot((snapshot) => {\n            const nweetArray = snapshot.docs.map\n            ( \n                (doc) => \n                    ({\n                        id: doc.id,\n                        ...doc.data(),\n                    })\n            );\n            console.log ( nweetArray)\n            setNweets(nweetArray);\n            });\n    }, []);\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.collection(\"nweets\").add({\n            text: nweet,\n            createdAt: Date.now(),\n            creatorId: userObj.uid            \n          });\n        setNweet(\"\");\n    };\n\n    //console.log(nweets);\n\n    const onChange = (event) => {\n      const {\n        target: { value },\n      } = event;\n      setNweet(value);\n    };\n\n    const onFileChange = (event) => {\n      const {\n        target: { files },\n      } = event;\n\n      // evnet 안에서 target 안으로 가서 파일을 받아 온다. \n      const theFile = files[0];                 //In the  \"file\", just bring the first one. \n      const reader = new FileReader();          // fileReader API, 사용자가 올린 이미지(파일)을 읽기 위한 변수\n      reader.onloadend = (finishedEvent) => {   // reader에 event listener를 추가\n        const {\n          currentTarget: { result },\n        } = finishedEvent;\n        setAttachment(result);\n      };\n      reader.readAsDataURL(theFile); // 최종적으로 데이터를 가지고 올수 있음 \n    };\n    const onClearAttachment = () => setAttachment(null);\n\n    return (\n      <div>\n        <form onSubmit={onSubmit}>\n          <input\n            value={nweet}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"What's on your mind?\"\n            maxLength={120}/>\n          <input type =\"file\" accept = \"image/*\" onChange = {onFileChange}/>\n          <input type=\"submit\" value=\"Nweet\" />\n          {attachment && (\n          <div>\n            <img src={attachment} width=\"300px\" height=\"300px\" />\n            <button onClick={onClearAttachment}>Clear</button>\n          </div>\n        )}\n        </form>\n        <div>\n            {nweets.map((nweet) => (\n            < Nweet \n                key ={nweet.id} \n                nweetObj={nweet} \n                isOwner={nweet.creatorId === userObj.uid} \n            />\n        ))}\n      </div>\n      </div>\n    );\n  };\n  export default Home;"]},"metadata":{},"sourceType":"module"}