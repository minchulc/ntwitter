{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/minchulcho/Desktop/Web/ntwitter/nwitter/src/routes/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { dbService } from \"fbase\";\n\nconst Home = () => {\n  _s();\n\n  const [nweet, setNweet] = useState(\"\");\n  const [nweets, setNweets] = useState([]);\n\n  const getNweets = async () => {\n    // firebase database에서 \"nweets\"라는 collection를 가지고 온다. get()이라는 함수를 사용 \n    // https://firebase.google.com/docs/firestore/query-data/get-data\n    const dbNweets = await dbService.collection(\"nweets\").get();\n    dbNweets.forEach(document => {\n      // nweetObject를 만들어서 \n      const nweetObject = { ...document.data(),\n        id: document.id\n      };\n      setNweets(prev => [nweetObject, ...prev]); //setNweets에 함수를 전달하면, react는 이전 값에 접근 할 수 있음\n      // dbNweets안에 있는 모든 documnet에 대해 array 값을 return \n      // implicit return \n    });\n  };\n\n  useEffect(() => {\n    getNweets();\n  }, []);\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    await dbService.collection(\"nweets\").add({\n      nweet,\n      createdAt: Date.now()\n    });\n    setNweet(\"\");\n  }; //console.log(nweets);\n\n\n  const onChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n    setNweet(value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: nweet,\n        onChange: onChange,\n        type: \"text\",\n        placeholder: \"What's on your mind?\",\n        maxLength: 120\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Nweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: nweets.map(nweet => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: nweet.nweet\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, nweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Home, \"IALbbgkikD84dCoZ0+ewUlggGfA=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/minchulcho/Desktop/Web/ntwitter/nwitter/src/routes/Home.js"],"names":["React","useState","useEffect","dbService","Home","nweet","setNweet","nweets","setNweets","getNweets","dbNweets","collection","get","forEach","document","nweetObject","data","id","prev","onSubmit","event","preventDefault","add","createdAt","Date","now","onChange","target","value","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA2C,OAA3C;AACA,SAASC,SAAT,QAA0B,OAA1B;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;;AACA,QAAMQ,SAAS,GAAG,YAAY;AAC5B;AACA;AACA,UAAMC,QAAQ,GAAG,MAAMP,SAAS,CAACQ,UAAV,CAAqB,QAArB,EAA+BC,GAA/B,EAAvB;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAkBC,QAAD,IAAc;AAC7B;AACA,YAAMC,WAAW,GAAG,EAClB,GAAGD,QAAQ,CAACE,IAAT,EADe;AAElBC,QAAAA,EAAE,EAAEH,QAAQ,CAACG;AAFK,OAApB;AAIAT,MAAAA,SAAS,CAAGU,IAAD,IAAU,CAACH,WAAD,EAAc,GAAGG,IAAjB,CAAZ,CAAT,CAN6B,CAO7B;AACA;AACA;AAED,KAXD;AAYD,GAhBD;;AAiBAhB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,SAAS;AACV,GAFQ,EAEN,EAFM,CAAT;;AAKA,QAAMU,QAAQ,GAAG,MAAOC,KAAP,IAAiB;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMlB,SAAS,CAACQ,UAAV,CAAqB,QAArB,EAA+BW,GAA/B,CAAmC;AACrCjB,MAAAA,KADqC;AAErCkB,MAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAF0B,KAAnC,CAAN;AAIAnB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAPD,CA1Be,CAmCf;;;AAEA,QAAMoB,QAAQ,GAAIN,KAAD,IAAW;AAC1B,UAAM;AACJO,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADJ,QAEFR,KAFJ;AAGAd,IAAAA,QAAQ,CAACsB,KAAD,CAAR;AACD,GALD;;AAMA,sBACE;AAAA,4BACE;AAAM,MAAA,QAAQ,EAAET,QAAhB;AAAA,8BACE;AACE,QAAA,KAAK,EAAEd,KADT;AAEE,QAAA,QAAQ,EAAEqB,QAFZ;AAGE,QAAA,IAAI,EAAC,MAHP;AAIE,QAAA,WAAW,EAAC,sBAJd;AAKE,QAAA,SAAS,EAAE;AALb;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA,gBACKnB,MAAM,CAACsB,GAAP,CAAYxB,KAAD,iBACZ;AAAA,+BACI;AAAA,oBAAKA,KAAK,CAACA;AAAX;AAAA;AAAA;AAAA;AAAA;AADJ,SAAUA,KAAK,CAACY,EAAhB;AAAA;AAAA;AAAA;AAAA,cADC;AADL;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CA/DH;;GAAMb,I;;KAAAA,I;AAgEJ,eAAeA,IAAf","sourcesContent":["import React,{ useState, useEffect }  from \"react\";\nimport { dbService } from \"fbase\";\n\nconst Home = () => {\n    const [nweet, setNweet] = useState(\"\");\n\n    const [nweets, setNweets] = useState([]);\n    const getNweets = async () => {\n      // firebase database에서 \"nweets\"라는 collection를 가지고 온다. get()이라는 함수를 사용 \n      // https://firebase.google.com/docs/firestore/query-data/get-data\n      const dbNweets = await dbService.collection(\"nweets\").get(); \n      dbNweets.forEach((document) => {\n        // nweetObject를 만들어서 \n        const nweetObject = {\n          ...document.data(),\n          id: document.id,\n        };\n        setNweets( (prev) => [nweetObject, ...prev] );\n        //setNweets에 함수를 전달하면, react는 이전 값에 접근 할 수 있음\n        // dbNweets안에 있는 모든 documnet에 대해 array 값을 return \n        // implicit return \n\n      });\n    };\n    useEffect(() => {\n      getNweets();\n    }, []);\n\n\n    const onSubmit = async (event) => {\n        event.preventDefault();\n        await dbService.collection(\"nweets\").add({\n            nweet,\n            createdAt: Date.now(),\n          });\n        setNweet(\"\");\n    };\n\n    //console.log(nweets);\n\n    const onChange = (event) => {\n      const {\n        target: { value },\n      } = event;\n      setNweet(value);\n    };\n    return (\n      <div>\n        <form onSubmit={onSubmit}>\n          <input\n            value={nweet}\n            onChange={onChange}\n            type=\"text\"\n            placeholder=\"What's on your mind?\"\n            maxLength={120}/>\n          <input type=\"submit\" value=\"Nweet\" />\n        </form>\n        <div>\n            {nweets.map((nweet) => (\n            <div key={nweet.id}>\n                <h4>{nweet.nweet}</h4>\n            </div>\n        ))}\n      </div>\n      </div>\n    );\n  };\n  export default Home;"]},"metadata":{},"sourceType":"module"}